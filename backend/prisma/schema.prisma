generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String        @id @default(uuid())
  email             String        @unique
  passwordHash      String
  fullName          String
  role              UserRole      @default(CONSUMER)
  accountStatus     AccountStatus @default(PENDING)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  resetToken        String?
  resetTokenExpiry  DateTime?
  bic               String?
  iban              String?
  siret             String?
  isStudent         Boolean       @default(false)
  producerCertified Boolean       @default(false)
  studentProof      String?
  cart              Cart?
  orders            Order[]
  products          Product[]
  favorites         Favorite[]
  notifications     Notification[]
}

model Category {
  id        String    @id @default(uuid())
  name      String    @unique
  slug      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Product {
  id            String           @id @default(uuid())
  name          String
  description   String
  price         Decimal          @db.Decimal(10, 2)
  originalPrice Decimal          @db.Decimal(10, 2)
  currency      String           @default("EUR")
  stock         Int              @default(0)
  imageUrl      String?
  type          String           // 'producer' ou 'restaurant'
  region        String
  producer      String           // Nom affiché du producteur/restaurant
  rating        Decimal          @default(0) @db.Decimal(3, 1)
  reviews       Int              @default(0)
  solidaire     Boolean          @default(false)
  distance      String           @default("0 km")
  isRestaurant  Boolean          @default(false)
  expiryNote    String?          // Note d'expiration pour les restaurants
  isActive      Boolean          @default(true) // Produit actif/inactif
  featured      Boolean          @default(false) // Produit mis en avant
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  ownerId       String
  categoryId    String?
  cartItems     CartItem[]
  orderItems    OrderItem[]
  favorites     Favorite[]       // Relation avec les favoris
  category      Category?        @relation(fields: [categoryId], references: [id])
  owner         User             @relation(fields: [ownerId], references: [id])
  contents      ProductContent[]
}

model ProductContent {
  id        String  @id @default(uuid())
  productId String
  item      String
  emoji     String
  order     Int     @default(0)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, order])
}

model Cart {
  id        String     @id @default(uuid())
  userId    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
}

model CartItem {
  id        String  @id @default(uuid())
  cartId    String
  productId String
  quantity  Int     @default(1)
  cart      Cart    @relation(fields: [cartId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
}

model Order {
  id              String      @id @default(uuid())
  userId          String
  total           Decimal     @db.Decimal(10, 2)
  status          OrderStatus @default(PENDING)
  paymentIntentId String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  user            User        @relation(fields: [userId], references: [id])
  items           OrderItem[]
}

model OrderItem {
  id              String  @id @default(uuid())
  orderId         String
  productId       String
  quantity        Int     @default(1)
  priceAtPurchase Decimal @db.Decimal(10, 2)
  sellerReady     Boolean @default(false)
  pickedUp        Boolean @default(false)
  order           Order   @relation(fields: [orderId], references: [id])
  product         Product @relation(fields: [productId], references: [id])
}

// Nouveau modèle pour les favoris
model Favorite {
  id        String   @id @default(uuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  type      String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  CONSUMER
  PRODUCER
  RESTAURANT
  ADMIN
}

enum AccountStatus {
  PENDING
  APPROVED
  REJECTED
}

enum OrderStatus {
  PENDING
  PAID
  FAILED
  CANCELLED
}
