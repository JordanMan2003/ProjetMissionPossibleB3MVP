import { PrismaService } from '../prisma/prisma.service';
import { UserRole } from '@prisma/client';
interface CreateUserInput {
    email: string;
    passwordHash: string;
    fullName: string;
    role: UserRole;
    siret?: string;
    iban?: string;
    bic?: string;
    producerCertified?: boolean;
    isStudent?: boolean;
    studentProof?: string | null;
}
export declare class UsersService {
    private readonly prisma;
    constructor(prisma: PrismaService);
    create(input: CreateUserInput): Promise<{
        id: string;
        email: string;
        passwordHash: string;
        fullName: string;
        role: import(".prisma/client").$Enums.UserRole;
        accountStatus: import(".prisma/client").$Enums.AccountStatus;
        createdAt: Date;
        updatedAt: Date;
        resetToken: string | null;
        resetTokenExpiry: Date | null;
        bic: string | null;
        iban: string | null;
        siret: string | null;
        isStudent: boolean;
        producerCertified: boolean;
        studentProof: string | null;
    }>;
    findByEmail(email: string): Promise<{
        id: string;
        email: string;
        passwordHash: string;
        fullName: string;
        role: import(".prisma/client").$Enums.UserRole;
        accountStatus: import(".prisma/client").$Enums.AccountStatus;
        createdAt: Date;
        updatedAt: Date;
        resetToken: string | null;
        resetTokenExpiry: Date | null;
        bic: string | null;
        iban: string | null;
        siret: string | null;
        isStudent: boolean;
        producerCertified: boolean;
        studentProof: string | null;
    } | null>;
    findById(id: string): Promise<{
        id: string;
        email: string;
        passwordHash: string;
        fullName: string;
        role: import(".prisma/client").$Enums.UserRole;
        accountStatus: import(".prisma/client").$Enums.AccountStatus;
        createdAt: Date;
        updatedAt: Date;
        resetToken: string | null;
        resetTokenExpiry: Date | null;
        bic: string | null;
        iban: string | null;
        siret: string | null;
        isStudent: boolean;
        producerCertified: boolean;
        studentProof: string | null;
    }>;
    approveUser(id: string): Promise<{
        id: string;
        email: string;
        passwordHash: string;
        fullName: string;
        role: import(".prisma/client").$Enums.UserRole;
        accountStatus: import(".prisma/client").$Enums.AccountStatus;
        createdAt: Date;
        updatedAt: Date;
        resetToken: string | null;
        resetTokenExpiry: Date | null;
        bic: string | null;
        iban: string | null;
        siret: string | null;
        isStudent: boolean;
        producerCertified: boolean;
        studentProof: string | null;
    }>;
    updateUser(id: string, data: Partial<{
        fullName: string;
        email: string;
    }>): Promise<{
        id: string;
        email: string;
        passwordHash: string;
        fullName: string;
        role: import(".prisma/client").$Enums.UserRole;
        accountStatus: import(".prisma/client").$Enums.AccountStatus;
        createdAt: Date;
        updatedAt: Date;
        resetToken: string | null;
        resetTokenExpiry: Date | null;
        bic: string | null;
        iban: string | null;
        siret: string | null;
        isStudent: boolean;
        producerCertified: boolean;
        studentProof: string | null;
    }>;
    deleteUser(id: string): Promise<{
        id: string;
        email: string;
        passwordHash: string;
        fullName: string;
        role: import(".prisma/client").$Enums.UserRole;
        accountStatus: import(".prisma/client").$Enums.AccountStatus;
        createdAt: Date;
        updatedAt: Date;
        resetToken: string | null;
        resetTokenExpiry: Date | null;
        bic: string | null;
        iban: string | null;
        siret: string | null;
        isStudent: boolean;
        producerCertified: boolean;
        studentProof: string | null;
    }>;
}
export {};
